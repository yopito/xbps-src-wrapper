#!/bin/bash
#
# Purpose:
#  XBPS build package(s) from within a new build env for each.
#  handle cross-build.
#
# XXX .dbg packages are not built
#
# XXX subpackage listing is wrong on conditional package(s). possible workaround:
#       $ echo subpackages | ./xbps-src show-pkg-var  nextcloud-client
#       nextcloud-client-devel
#
# XXX support multiple/all targets arch. via multiple -a arguments ?
#
# XXX cat template at the beginning of log file ?
#
# XXX 2019-07 sort-dependencies is now wrong. see how bulk_build() works now
#
# XXX dry mode generate logfile(s) anyway
#
# XXX offline: '-N' option of xbps-src usefull ? not (yet)
#     Example:
#       $ ./build.scratch '-N' burp2-server
#       # input xbps-src arguments: '-N'
#       # implied binary boostrap argument:
#       # cmd: ./xbps-src  -N zap > /dev/null
#       # cmd: ./xbps-src  -N binary-bootstrap  > /dev/null
#       Unable to locate 'base-chroot' in repository pool.
#       => ERROR: Failed to install bootstrap packages!
#       # ERROR on cmd.
#       # exiting requested: stop here
#
# XXX workflow is broken on noarch packages and cascaded builds
#     like cross-build that requests native builds
#     update 2020-04: might be fixed since split of binpkgs repo
#     Example:
#       if x86_64 produces *noarch* package libsearpc-codegen, rindex is updated for x86_64.
#       Then on armv7hf builds, the same noarch package is (re)generated.
#       Then rindex of armv7l is updated, so rindex of x86_84 becomes out of date:
#       still references the *old* noarch package.
#       Becomes a mess if this package is required subsequently (native arch)
#     => catch this particular case and update rindex instead of building ?
#     => use separate hostdir for each target arch ?
#        with symetric layouts like hostdir/repocache/<target_arch>-<libc_flavor>/ instead ?
#
# XXX take control of hostdir since binary-bootstrap may fail with other masterdir(s)
#     or while installing cross-build tools ?
#     Because mixing noarch packages from distinct repo flavor into the same location
#     hostdir/repocache/ is somewhat stange (see previous point)
#     ... layout should be hostdir/repocache/<target_arch>-<libc_flavor>/ instead
#     => temp workaround: delete hostdir/repocache/
#
# About cross-building: start is different on native arch and target arch:
#
#     - if same processor arch, we can use a "native" bootstrap:
#       $ ./xbps-src binary-bootstrap x86_64-musl # same arch but different libc
#       $ ./xbps-src pkg                          # no other args ?
#
#     - if cross-arch (like target=armv7hf), have to be different:
#       $ ./xbps-src binary-bootstrap    # native arch for tools: no platform target
#       $ ./xbps-src -a armv7hf pkg .... # require cross-build via -a flag
#
#     - example: .travis.yml

usage() {
cat << EOFusage

xbps-src build wrapper using a fresh masterdir for each package build

Usage:

  $0 [-n] [-h] [xbps-src-flags] [PKG1 PKG2 ...]

  -n              dry run
  -h              this help
  xbps-src-flags  QUOTE THEM if any (like '-a <arch> [-m <dir>] ...')
  PKG1 PKG2 ...   list of package(s) to build. Retrieved from git if not provided.

  Each package is built one by one in a new masterdir,
  xbps-src options '-C' and '-f' are already in use by this script,
  Packages are built with the right build dependency order,
  If package list is empty, retrieve it from command "git diff master ...".
  Build output and package(s) infos are stored in a timestamped log files (./log/ folder)

  Don't perform native and cross builds using the same hostdir/repocache/ folder

  Examples:

    * cross-build librsync for armv7hf:
      $0 '-a armv7hf' librsync

    * cross-build all packages in current git branch for x86_64-musl:
      $0 '-a x86_64-musl'

    * build GNU libc package from a musl libc host (reuse of '-a <arch>' flag):
      (x86_64-musl) $0 '-a x86_64' <pkg>

    * check output on build logs in the meantime:
      $ watch -n 5 "ls -1tr log/*/*.log | tail -n 3 | xargs du -sk && echo && ls -1tr log/*/*.log | tail -n 1 | xargs tail"
EOFusage
}

exec_or_dry() {
  # $1: command to execute
  # $2: do not exit if set and command returns != 0
  if [ "$DRY" = 1 ]; then
    echo "# dry cmd: $1"
    return 0
  fi
  echo "# cmd: $1"
  eval "$1"
  if [ $? -ne 0 ]; then
    echo "# ERROR on cmd."
    if  [ -z "$2" ]; then
      echo "# exiting requested: stop here"
      exit 1
    fi
  fi
}

## Initialization
DRY=
XBPSSRCARGS=

PKGS=
ts="$(date '+%Y-%m-%d_%H%M%S')"

if ! ( [ -x "./xbps-src" ] || [ -d "./srcpkgs" ] ); then
  echo "[ERROR] missing ./xbps-src or ./srcpkgs folder: wrong directory ?"
  exit 1
fi

[ ! -d "log" ] && (echo "creating log/ ..." ; mkdir log )

## read command-line args
for arg; do
	case $arg in
		-n) DRY=1 ;;
		-h|--help) usage && exit 0 ;;
		-*) XBPSSRCARGS="$XBPSSRCARGS $arg";;
		*) PKGS="$PKGS $arg"
	esac
done

# strip leading ' '
XBPSSRCARGS="${XBPSSRCARGS# }"

echo
echo "# input xbps-src arguments: '$XBPSSRCARGS'"

# split: $XBPSSRCARGS == $XBPSSRCNOCP -a $target_platform
#   XBPSSRCARGS: command-line arguments for xbps-src
#   ARCHARG    : flag to indicate next arg is the '-a' <arch> (from '-a <arch>')
#   target_platform  : cross-profile to use (from '-a <arch>')
#   XBPSSRCNOCP: XBPSSRCARGS without cross-profile arg (without '-a <arch>').
#   bootstrap_platform: the target arch for xbps-src binary-bootstrap operation.
#                       provided if native arch and target arch are different
#                       or if their libc flavor is different.
#   XBPSSRCPKGARG:  for use in "xbps-src $XBPSSRCPKGARG pkg" (take care of platform/target arch)

XBPSSRCNOCP=
target_platform=
ARCHARG=no
bootstrap_platform=
XBPSSRCPKGARG="$XBPSSRCARGS"
for o in $XBPSSRCARGS; do
   if [ "$o" = "-a" ]; then
     ARCHARG=yes
   else
     if [ "$ARCHARG" = "yes" ]; then
       target_platform=$o
       ARCHARG=no
     else
        XBPSSRCNOCP="$XBPSSRCNOCP $o"
     fi
   fi
done

# Compute host and target platforms. Need to handle libc flavors.
# libc are not expressed the same way: '' for GNU libc, 'musl' for musl libc.
# Crossbuild from -musl arch need a glibc bootstrap if glibc is the target libc:
# so this wrapper reuses the '-a <target>' argument to manage it.
#
# examples:
#   - h=x86_64-musl t=aarch64     : bstrap=x86_64
#   - h=x86_64      t=aarch64     : bstrap=x86_64      or empty (same libc)
#   - h=x86_64      t=aarch64-musl: bstrap=x86_64      or empty (same libc)
#   - h=x86_64-musl t=aarch64-musl: bstrap=x86_64-musl or empty (same libc)
#   - h=x86_64-musl t=x86_64      : bstrap=x86_64
#   - h=x86_64      t=x86_64-musl : bstrap=x86_64
native_platform=$(xbps-uhelper -C /dev/null arch)
bootstrap_platform=
querypkg_platform=$target_platform

if [[ $native_platform == *-musl ]] && [ -n "$target_platform" ]
then
  if [[ $target_platform == *-musl ]]
  then
    bootstrap_platform=$native_platform
  else
    bootstrap_platform=$(uname -m)
  fi
fi
# special case: remove cross-arch argument since handled by bootstrap arch/libc
if [[ $bootstrap_platform == $target_platform ]]
then
  ARCHARGS=no
  target_platform=
  XBPSSRCPKGARG="$XBPSSRCNOCP"
  querypkg_platform=$bootstrap_platform
fi

echo "# implied binary bootstrap argument: $bootstrap_platform"

# don't use 'xbps-src zap' anymore: may left unwanted stuff
# simply delete masterdir instead

MDIR_TMP="$(./xbps-src show-var XBPS_MASTERDIR | grep -v '^=>' )"
echo "# start with a new masterdir ($MDIR_TMP)..."
[ $MDIR_TMP = "" ] || exec_or_dry "rm -rf $MDIR_TMP"
exec_or_dry "./xbps-src $XBPSSRCNOCP binary-bootstrap $bootstrap_platform > /dev/null"

# Check target platform is known
if [ -n "$target_platform" ]
then
  if [ ! -f "common/cross-profiles/${target_platform}.sh" ]
  then
    echo "[ERROR] '$target_platform' is not a cross-arch ? missing file 'common/cross-profiles/${target_platform}.sh'"
    exit 1
  fi
fi

## retrieve local repository to store built packages
REPO=$( ./xbps-src $XBPSSRCARGS show-var XBPS_REPOSITORY | grep -v '^=>')

## if no package list provided, compute it from git against the master branch
if [ "$PKGS" = "" ]; then
  echo "# input: no given package: retrieve list against git master branch..."
  PKGS=$(git diff master --name-only --diff-filter=AM |
              grep -F "/template" |
              sed -e 's,srcpkgs/\(.*\)/template,\1,' |
              tr '\n' ' ')
fi
echo "# package(s) to consider: $PKGS"

echo "# XXX (disabled) compute package build order and other needed package builds..."
PKGSU=
#for dep in $(./xbps-src $XBPSSRCARGS sort-dependencies $PKGS |
#             sed '1d;s|[<>].*$||g'); do
#		PKGSU="$PKGSU $dep"
#		#echo "[dbg] dep=$dep PKGSU=$PKGSU"
#done

# if nothing found, let's work on what is requested
[ "$PKGSU" = "" ] && PKGSU="$PKGS"

echo "# package(s) to build (build ordered): $PKGSU"

## main stuff: loop on each package to build

need_fresh_build=0

archsuffix="${XBPSSRCARGS// /.}"
archsuffix="${archsuffix#-a}"

for pkg in $PKGSU; do
    echo
    logdir="log/${ts}.${pkg}${archsuffix}"
    logf="${logdir}/${pkg}.log"

    # masterdir is already a new one for 1st package (already done)
    if [ $need_fresh_build -eq 0 ]; then
      # will do on next package build
      need_fresh_build=1
    else
      echo "# [$pkg] new mastedir and do binary-bootstrap ..."
      MDIR_TMP="$(./xbps-src show-var XBPS_MASTERDIR | grep -v '^=>' )"
      [ $MDIR_TMP = "" ] || exec_or_dry "rm -rf $MDIR_TMP"
      exec_or_dry "./xbps-src $XBPSSRCNOCP binary-bootstrap $bootstrap_platform > /dev/null"
    fi

    echo "# [$pkg] let's build ..."
    echo "# [$pkg] logfile: $logf ..."
    exec_or_dry "mkdir -p $(dirname $(realpath -m $logf))"
    exec_or_dry "./xbps-src $XBPSSRCPKGARG -f -C pkg $pkg 2>&1 > $logf"

    # subpackages of $pkg
    # XXX wrong if conditional packages
    spkg=$(find srcpkgs -type l -lname $pkg | sed -e 's,srcpkgs/,,')
    echo "# [$pkg] subpackages: $spkg"

    for p in $pkg $spkg; do
      xbinfo="${logdir}/$p.xbps.info"

      echo "#"
      echo "# [$p] XBPS infos into logfile: $xbinfo ..."
      XBPSQ="xbps-query -R -i --repository=$REPO"
      [ -n "$querypkg_platform" ] && XBPSQ="XBPS_TARGET_ARCH=$querypkg_platform $XBPSQ"

      echo "# package information:" >> $xbinfo
      exec_or_dry "$XBPSQ -S $p >> $xbinfo"

      echo "# package dependencies (sorted):" >> $xbinfo
      exec_or_dry "$XBPSQ -x $p | sort >> $xbinfo"

      echo "# package files (sorted):" >> $xbinfo
      exec_or_dry "$XBPSQ -f $p | sort >> $xbinfo"
    done
done

echo "# That's all folks !"
